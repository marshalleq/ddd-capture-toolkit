Remember that the purpose of this project is to fix alignment with a VHS workflow.  The first step is to create an MP4 file which contains a cycle of events explained later in this text.  The creation of a robust MP4 timecode file is paramount, and this is made with menu item 3.2.  This requires perfect frame accuracy at the MP4 level for it to work, i.e. the timecode for the audio must perfectly align with the timecode for the video to a frame level of accuracy.  This means that the mp4 validation menu item 5.4 must validate frame accuracy of the created mp4 file without doing any adjustments to the position or start time of the audio and video tracks.  It must work on the files 'as is', it must not modify them.  Once this mp4 file is made and validated, we convert this to an iso and write to DVD, this is then copied to a VHS tape directly by plugging a DVD player into a VHS player and directly recording to the tape.  We then use menu item 5.2 to capture what is on the VHS tape, to the computer, with the capture system which consists of a Domesday Duplicator for the Video part and a Clockgen Lite for the audio part.  The clockgen lite and Domesday Duplicator share a timing clock at the hardware level which removes clock drift over long running capture sessions.  However, the expectation is that there will be 'start time' sync differences between the two which is what we want to prove (and solve with a delay value) with menu item 5.3.  If we subsequently find that there are any issues reading the audio or video (i.e meaning we can't get accurate timing data from the audio or video tracks) then this can only be a failed MP4 file or a failed validation step.  So far, the MP4 file seems to be well validated via menu 5.4, so the focus should be on menu 5.3.  To this end the Video timecode and the audio timecode must stand on their own, one is not a redundancy for the other.  One tiny complication to this is that there are mechanical challenges when capturing from vcr which will cause frame sync issues between audio and video.  The video is already taken care of by running through a software based Time Based Corrector, and there is a tool for applying this to the audio as well, but this tool get's it's timecode information from the video metadata.  Because it get's it's timecode information from the video metadata, the audio file needs to have it's delay time calculated first, so that the start of both the audio and video is close enough of a match that it can work.  The timecode data is written into a specially designed sequence of events.  The sequence of events is done in this way so that the audio and video can be predicable by the validator.  The sequence is, 4 seconds of test pattern with 1khz tone, 1 second of black screen with no tone, then timecode audio and video data for 30 seconds, then 1 second of black screen with no tone, then the cycle starts again.  Another reason it is done in this way, is that the VHS player is started manually by a human and it may start not exactly at the start of this sequence.  Knowing for example there was 1 second of test charts then a 1 second blank screen followed by timecode data should be enough for the validator to figure out where the audio is and the video is on the tracks.  And finally, we talk about delay times.  The sox audio is configured to start first as it is easier to manage than the video.  because it starts first, the delay time is referring to how much delay should we add before starting the sox capture, so that the audio effectively starts at the same time as the video, allowing the mechanical audio calibration enough closeness in order to function, without there being any noticable A/V sync issues.  There should not be a need to delay video.  This delay value is written into the config.json file and is meant to be used automatically by menu item 1.  It is not meant to be used by any other menu item.  Please make sure it is not added to any of the validation steps.
I keep hearing you say that the capture issue is due to VHS mechanical timing problems, and this certainly does play into the processing of the audio stream, however the main timing issue we want to solve isn't this, it's the start capture time, which could also be called a timing issue.
In addition, the menus 3.2, 5.3 and 5.4 must use a shared encode / decode logic, created in a single location to ensure comparing of apples with apples.  However, due to the exactness of creating the mp4 file and imprecise mechanical and start time issues of the 5.3 VHS validation step, 5.3 needs to drop the frame based alignment or as you put it the deterministic approach or at least relax it.  But please ensure otherwise the methodology is shared.  The MP4 file creation must have a very strict approach to timing.  The VHS need the more relaxed approach.
Note that the way that the timecode encoding has been created, is specifically to be robust and survive the capture to VHS.
The fundamental approach is:
Frame 1 audio at time X, Frame 1 video at time Y → offset = X - Y
•  Frame 2 audio at time X+0.04s, Frame 2 video at time Y+0.04s → offset should still be X - Y
•  All frames should have roughly the same offset (within tenths of a second)
The correct approach therefore should
1. Sort both video and audio timecodes by their temporal position
2. For each unique frame ID, match the first occurrence in video with the first occurrence in audio
3. Calculate offset for each matched pair
4. Average the offsets (they should all be very similar)

This eliminates the need for sliding windows or complex temporal constraints - we just need sequential matching instead of exhaustive matching.

Video Pattern Structure (Cycles):
[4s test pattern] → [1s black] → [30s timecode] → [1s black] → [repeat...]
     ↓ video          ↓ video        ↓ video        ↓ video
[4s test tone]   → [1s silence] → [30s FSK data] → [1s silence] → [repeat...]
     ↓ audio          ↓ audio        ↓ audio        ↓ audio

For reference  I have put some screenshots into a new folder called media/Alignment Samples.  The screenshots are captured from a VHS tape that has recoded the MP4 file from a DVD player.  They are named TestPatternPAL.png which shows the first phase of the cycle, BlackScreenPAL.png which shows the 1 second black video phase and TimecodeScreenPAL.png which shows one clip of the 30 second timecode phase 3:15 seconds in.  These are direct screenshots taken in the vlc application and are in PAL format.

What should happen is:
•  Video might have: Frame ID 100 at time 4.0s, Frame ID 101 at time 4.04s, Frame ID 102 at time 4.08s
•  Audio might have: Frame ID 100 at time 3.9s, Frame ID 101 at time 3.94s, Frame ID 102 at time 3.98s
•  We match: Frame ID 100 video→audio, Frame ID 101 video→audio, Frame ID 102 video→audio
•  Calculate offsets: 4.0-3.9=0.1s, 4.04-3.94=0.1s, 4.08-3.98=0.1s
•  Average: 0.1s delay needed for audio
